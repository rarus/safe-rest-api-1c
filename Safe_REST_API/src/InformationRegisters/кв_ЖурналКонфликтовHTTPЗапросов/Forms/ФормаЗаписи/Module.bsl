///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.РазблокироватьЗапрос.Видимость = Не ЗначениеЗаполнено(Запись.ДатаРазблокировки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКЗапросу(Команда)
	
	ОписаниеКлюча = ОписаниеКлючаЗаблокированногоЗапроса();
	
	Если НЕ ПроверкаНаличияПервичногоЗапроса(ОписаниеКлюча) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКлюча = Новый Массив;
	МассивКлюча.Добавить(ОписаниеКлюча);
	
	КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.кв_ЖурналВходящихHTTPЗапросов", МассивКлюча);
	Если КлючЗаписи.Пустой() Тогда
		СообщитьОбОтсутствииЗаписиПервичногоЗапроса();
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	Попытка
		ОткрытьФорму("РегистрСведений.кв_ЖурналВходящихHTTPЗапросов.Форма.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	Исключение
		ШаблонСообщения = НСтр("ru='Не удалось открыть форму журнала запроса. %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		кв_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючЗаписи);
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьЗапрос(Команда)
	
	ОписаниеКлюча = ОписаниеКлючаЗаблокированногоЗапроса(Истина);
	
	Если НЕ ПроверкаНаличияПервичногоЗапроса(ОписаниеКлюча) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ОписаниеКлюча);
	ТекстВопроса = НСтр("ru = 'При разблокировании конфликта повторные запросы получат возможность выполнения.
		|Продолжить?'");
	
	РежимДиалога = РежимДиалогаВопрос.ДаНет;
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалога, , КодВозвратаДиалога.Нет, "Разблокировать запрос");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтефейс

// Выполняет действия после закрытия вопроса о разблокировании запроса
//
// Параметры:
//  Результат - КодВозвратаДиалога - ответ пользователя 
//  ДополнительныеПараметры	 - Структура - дополнительные параметры из оповещения
//
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РазблокироватьЗапросНаСервере(ДополнительныеПараметры);
	
	Прочитать();
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.кв_ЖурналВходящихHTTPЗапросов"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.кв_ЖурналКонфликтовHTTPЗапросов"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗаписьЖурналаВходящихHTTPЗапросовСуществует(ОписаниеКлюча)
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кв_ЖурналВходящихHTTPЗапросов.Запрос КАК Запрос
	|ИЗ
	|	РегистрСведений.кв_ЖурналВходящихHTTPЗапросов КАК кв_ЖурналВходящихHTTPЗапросов
	|ГДЕ
	|	кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса = &ДатаЗапроса
	|	И кв_ЖурналВходящихHTTPЗапросов.Сервис = &Сервис
	|	И кв_ЖурналВходящихHTTPЗапросов.Идентификатор = &Идентификатор";
	
	кв_ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ОписаниеКлюча, Истина);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Возврат Не РезультатЗапроса.Пустой();

КонецФункции

&НаКлиенте
Функция ОписаниеКлючаЗаблокированногоЗапроса(Разблокирование = Ложь)

	ОписаниеКлюча = Новый Структура;
	ОписаниеКлюча.Вставить("ДатаЗапроса", Запись.ДатаБлокировки);
	ОписаниеКлюча.Вставить("Сервис", Запись.Сервис);
	ОписаниеКлюча.Вставить("Идентификатор", Запись.Идентификатор);
	
	Если Разблокирование Тогда
		ОписаниеКлюча.Вставить("КлючИдемпотентности", Запись.КлючИдемпотентности);
	КонецЕсли;
		
	Возврат ОписаниеКлюча;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОбОтсутствииЗаписиПервичногоЗапроса()

	ТекстСообщения = НСтр("ru='Запись первичного запроса отсутствует в журнале входящих запросов.'");
	кв_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПроверкаНаличияПервичногоЗапроса(Знач ОписаниеКлюча)
	
	ЗаписьРегистраСуществует = ЗаписьЖурналаВходящихHTTPЗапросовСуществует(ОписаниеКлюча);

	Если НЕ ЗаписьРегистраСуществует Тогда
		СообщитьОбОтсутствииЗаписиПервичногоЗапроса();
	КонецЕсли; 
	
	Возврат ЗаписьРегистраСуществует;

КонецФункции 

&НаСервереБезКонтекста
Процедура РазблокироватьЗапросНаСервере(Знач ОписаниеКлюча)
	
	РегистрыСведений.кв_ЖурналКонфликтовHTTPЗапросов.РазблокироватьЗапрос(ОписаниеКлюча);
	
	кв_ОбщегоНазначения.ЗаписатьОперациюБизнесСтатистики("РазблокироватьЗапрос");
	
КонецПроцедуры

#КонецОбласти