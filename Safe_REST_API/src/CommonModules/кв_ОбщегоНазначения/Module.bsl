///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные   - Произвольный - любое сериализуемое значение.
//  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
// 
// Возвращаемое значение:
//  Строка - контрольная сумма строкой без пробелов, 32 байта.
//
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	
	ХешированиеДанных.Добавить(Данные);
	Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	Возврат Результат;
	
КонецФункции

// Преобразует локальную дату к формату "YYYY-MM-DDThh:mm:ssTZD" согласно ISO 8601.
//
// Параметры:
//  ЛокальнаяДата - Дата - дата в часовом поясе сеанса.
// 
// Возвращаемое значение:
//   Строка - представление даты.
//
Функция ПредставлениеЛокальнойДатыСоСмещением(ЛокальнаяДата) Экспорт
	
	Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	
	ПредставлениеСмещения = "Z";
	
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = -Смещение;
	КонецЕсли;
	
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HH:mm");
	КонецЕсли;
	
	Возврат Формат(ЛокальнаяДата, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00") + ПредставлениеСмещения;
	
КонецФункции

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("кв_ОбщегоНазначения.Пауза", Параметры);
	КонецЕсли;
		
	Попытка
		ФоновоеЗадание.ОжидатьЗавершения(Секунд);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

#Область JSON

// Читает строку JSON в коллекцию.
//
// Параметры:
//  Строка					 - Строка	 - Строка JSON.
//  ПрочитатьВСоответствие	 - Булево	 - Признак чтения в соответсвие.
// 
// Возвращаемое значение:
//  Структура, Соответствие - Прочитанные данные.
//
Функция ПрочитатьJSONСтроку(Строка, ПрочитатьВСоответствие = Ложь) Экспорт 

	Если ПрочитатьВСоответствие Тогда
		РезультатЧтения = Новый Соответствие;
	Иначе	
		РезультатЧтения = Новый Структура;
	КонецЕсли;

	Если ЗначениеЗаполнено(Строка) Тогда
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Строка);
			РезультатЧтения = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
			ЧтениеJSON.Закрыть();
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстОшибки = СтрШаблон("Ошибка чтения JSON: %1.
				|JSON: %2", ПодробноеПредставлениеОшибки, Строка);
			
			ЗаписьЖурналаРегистрации("Чтение JSON", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
		КонецПопытки;
	КонецЕсли;
		
	//@skip-check constructor-function-return-section
	Возврат РезультатЧтения;	

КонецФункции

// Возвращает значение в виде JSON-строки.
//  Сериализовать в JSON-строку возможно только те объекты, для которых в СП указано, что они сериализуются.
//
// Параметры:
//  Значение				 - Произвольный				 - Значение, которое необходимо сериализовать в JSON-строку.
//  ПараметрыЗаписи			 - ПараметрыЗаписиJSON		 - Параметры записи JSON.
//  НастройкиСериализации	 - НастройкиСериализацииJSON - Настройки сериализации JSON.
//  ПутьКФайлу				 - Строка					 - Если заполнено, JSON-строка будет записана в файл.
// 
// Возвращаемое значение:
//  Строка - JSON-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуJSON(Значение, Знач ПараметрыЗаписи = Неопределено, НастройкиСериализации = Неопределено,
	ПутьКФайлу = "") Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	КонецЕсли; 
	
	Если НастройкиСериализации = Неопределено Тогда	
		НастройкиСериализации = Новый НастройкиСериализацииJSON;
		НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
		НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ЗаписьJSON.ОткрытьФайл(ПутьКФайлу);
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализации, "ПреобразоватьЗначениеJSON", кв_ОбщегоНазначения);
	
	РезультатЗаписи = ЗаписьJSON.Закрыть();
	
	Возврат РезультатЗаписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Преобразовывает значение, тип которых не поддерживает преобразование в формат JSON напрямую.
//
// Параметры:
//  Свойство				 - Строка		 - Имя свойства.
//  Значение				 - Произвольный	 - Исходное значение.
//  ДополнительныеПараметры	 - Структура	 - Дополнительные параметры.
//  Отказ					 - Булево		 - Отказ от записи свойства.
// 
// Возвращаемое значение:
//  Произвольный - Преобразованное значение.
//
Функция ПреобразоватьЗначениеJSON(Свойство, Значение, ДополнительныеПараметры = Неопределено, Отказ = Ложь) Экспорт

	ТипЗначения = ТипЗнч(Значение);
	
	Если ЗначениеЗаполнено(Значение)
		И ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		
		НовоеЗначение = Строка(Значение);
	
	ИначеЕсли НЕ Значение = Null Тогда
		
		НовоеЗначение = "";
		
		ЗначениеСтрокой = ЗначениеВСтрокуВнутр(Значение);
	
		ТекстОшибки = СтрШаблон("Ошибка преобразования свойства <%1> в Json значения. Тип значения: %2.
			|Представление: %3", Свойство, ТипЗначения, ЗначениеСтрокой);
		
		ЗаписьЖурналаРегистрации("Преобразование значения JSON", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	Иначе
		
		НовоеЗначение = "";
	
	КонецЕсли;
	
	Возврат НовоеЗначение;

КонецФункции

// Записывает в журнал бизнес-статистики сведения о событии.
//
// Параметры:
//  ИмяОперации	- Строка	- имя операции статистики, в случае отсутствия создается новое.
//  Значение	- Число		- количественное значение операции статистики.
//  Комментарий	- Строка	- произвольный комментарий.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1, Комментарий = "") Экспорт
	
	// Проверим, есть ли подсистема мониторинга
	Если Метаданные.ОбщиеМодули.Найти("ЦентрМониторинга") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// АПК:488-выкл Модуля может не быть в системе, обходим синтаксис контроль платформы
	УстановитьБезопасныйРежим(Истина);
	МодульЦентрМониторинга = Вычислить("ЦентрМониторинга");
	// АПК:488-вкл
	
	ИмяОперации = "Инструменты.КонтрольHTTPСервисов." + ИмяОперации;
	МодульЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение, Комментарий);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает количество секунд в одних сутках.
//
// Возвращаемое значение:
//   Число   - Количество секунд
//
Функция СекундВСутках()

	Возврат 86400;

КонецФункции

// Сериализует любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти