///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

// Конструктор контекста для хранения параметров обработки запроса.
//
// Параметры:
//  Запрос - HTTPСервисЗапрос - Входящий запрос сервиса.
//  ПараметрыМетода - Структура - Получаемые параметры метода запроса.
// 
// Возвращаемое значение:
//  Структура - Контекст обработки запроса.
//  * Сервис - СправочникСсылка.кв_Сервисы - Сервис.
//  * ВремяНачала - Число - Универсальная дата в миллисекундах.
//  * ОбязательныеПараметры - Массив - Параметры запроса, обязательные к заполнению.
//  * ИзвлекаемыеПараметры - Массив - Параметры запроса, которые необходимо извлечь из тела запроса.
//  * НастройкиСервиса - Структура - Настройки сервиса.
//  * ИмяСобытия - Имя события для журнала регистрации.
//  * Метод - Строка - Имя метода http-запроса.
//  * БазовыйURL - Строка - Базовый URL, путь до сервиса.
//  * ОтносительныйURL - Строка - Относительный URL, путь до ресурса.
//  * ПараметрыЗапросаИзURL - Структура - Параметры http-запроса из URL.
//  * Заголовки - Структура - Заголовки http-запроса.
//  * ПроверитьИдемпотентностьЗапроса - Булево - Признак необходимости проверки запроса.
//  * ПараметрыЗапроса - Структура - Параметры http-запроса.
//  * Результат - Структура - Результат обработки запроса.
//
Функция КонтекстЗапроса(Запрос, ОбеспечениеИдемпотентности = Ложь, КонтрольКонфликтовЗапросов = Ложь,
	ПараметрыМетода = Неопределено) Экспорт
	
	Контекст = КонструкторКонтекстаЗапроса(Запрос, ОбеспечениеИдемпотентности, КонтрольКонфликтовЗапросов);
	
	Попытка
		
		ДобавитьПараметрыЗапросаВКонтекст(Контекст, Запрос, ПараметрыМетода);
		
		ЗаписатьПараметрыВходящегоЗапросаВЖурнал(Контекст);
		
	Исключение
		
		Причина = ИнформацияОбОшибке();
		ЗафиксироватьОшибкуВЖурналРегистрации(Контекст, Причина);
		
	КонецПопытки;
	
	ПроверитьВозможностьИсполненияЗапроса(Контекст, ПараметрыМетода);
	
	//@skip-check constructor-function-return-section
	Возврат Контекст;
	
КонецФункции

// Возвращает заголовки запроса или ответа в виде строки с разделителями.
//
// Параметры:
//  Заголовки - Соответствие - Заголовки запроса.
// 
// Возвращаемое значение:
//  Строка - Заголовки строкой
//
Функция ЗаголовкиСтрокой(Заголовки) Экспорт 
	
	Строки = Новый Массив;
	
	Для каждого Заголовок Из Заголовки Цикл
		
		Шаблон = """%1"":""%2""";
		ПредставлениеЗаголовка = СтрШаблон(Шаблон, Заголовок.Ключ, Заголовок.Значение);
		Строки.Добавить(ПредставлениеЗаголовка);	
	
	КонецЦикла; 
	
	ЗаголовкиСтрокой = СтрСоединить(Строки, "; ");
	
	Возврат ЗаголовкиСтрокой;

КонецФункции

// Выполняет заполнение подробного описания ошибки для вывода его в теле ответа,
//  в соответствии со спецификацией RFC 7807.
//
// Параметры:
//  Контекст		 - Структура - Контекст запроса.
//  КодСостояния	 - Строка	 - Код ошибки.
//  ПричинаОшибки	 - Строка	 - Причина ошибки, краткое описание проблемы.
//  ТекстОшибки		 - Строка	 - Детальное описание ошибки, подсказывает что именно вызывает ошибку.
//  Ссылка			 - Строка	 - Ссылка на информационный ресурс в сети.
//
Процедура ДобавитьОписаниеОшибки(Контекст, КодСостояния, ПричинаОшибки = "", ТекстОшибки = "", Ссылка = "") Экспорт
	
	Если ПустаяСтрока(ПричинаОшибки) Тогда
		ПричинаОшибки = ПричинаОшибкиПоКоду(КодСостояния);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ПричинаОшибки;
	КонецЕсли;
	
	URL = СтрШаблон("%1%2", Контекст.БазовыйURL, Контекст.ОтносительныйURL);
	
	ПараметрыОтвета = Новый Структура;
	ПараметрыОтвета.Вставить("title", ПричинаОшибки);
	ПараметрыОтвета.Вставить("detail", ТекстОшибки);
	ПараметрыОтвета.Вставить("status", КодСостояния);
	ПараметрыОтвета.Вставить("url", URL);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыОтвета.Вставить("link", Ссылка);
	КонецЕсли;
	
	Результат = Контекст.Результат;
	
	Результат.Отказ = Истина;
	Результат.ТекстОшибки = ТекстОшибки;
	Результат.ПричинаОшибки = ПричинаОшибки;
	Результат.КодСостояния = КодСостояния;
	Результат.ПараметрыОтвета = ПараметрыОтвета;
	
КонецПроцедуры

// Возвращает ответ сервера на запрос.
//
// Параметры:
//  Контекст			 - Структура - Контекст запроса.
//  Результат			 - Структура - Результат обработки запроса.
//  ПреобразоватьДанные	 - Булево	 - Требуется преобразование данных для передачи.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Содержит ответ, формируемый HTTP-сервисом.
//
Функция ОтветНаЗапрос(Контекст, ПреобразоватьДанные = Истина) Экспорт
	
	Ответ = СформироватьОтвет(Контекст, ПреобразоватьДанные);
	
	ЗаписатьОтветВЖурналВходящихHTTPЗапросов(Контекст, Ответ);
	
	Возврат Ответ;
	
КонецФункции	

// Регистрирует ответ сервера в журнале запросов
//
// Параметры:
//  Контекст - Структура - Контекст запроса.
//  Ответ    - HTTPСервисОтвет - Ответ сервера на входящий запрос.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Содержит ответ, формируемый HTTP-сервисом.
//
Функция РегистрацияОтвета(Контекст, Ответ) Экспорт
	
	ЗаписатьОтветВЖурналВходящихHTTPЗапросов(Контекст, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает признак готовности описания ошибки для ответа серверу
//
// Параметры:
//  Результат	 - Структура - Результат обработки запроса.
// 
// Возвращаемое значение:
//   - Булево - признак готовности описания ошибки.
//
Функция ГотовоОписаниеОшибкиВОтвете(Результат) Экспорт
	
	Возврат Результат.Отказ
		И Результат.Свойство("ПараметрыОтвета")
		И ЗначениеЗаполнено(Результат.ПараметрыОтвета);
			
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Обработчик регламентного задания кв_РазблокированиеКонфликтовHTTPЗапросов.
//
Процедура ВыполнитьРазблокированиеКонфликтовЗапросов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ИспользуютсяРегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.кв_ЖурналКонфликтовHTTPЗапросов.РазблокироватьЗапросы();
	
КонецПроцедуры

// Обработчик регламентного задания кв_СокращениеЖурналовHTTPЗапросов.
//
Процедура ВыполнитьСокращениеЖурналовHTTPЗапросов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ИспользуютсяРегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;

	УдалитьУстаревшиеЗаписиЖурнала("кв_ЖурналВходящихHTTPЗапросов",   "ДатаЗапроса");
	УдалитьУстаревшиеЗаписиЖурнала("кв_ЖурналКонфликтовHTTPЗапросов", "ДатаБлокировки");
	
КонецПроцедуры 

#КонецОбласти

// Возвращает текущую версию подсистемы "Контроль HTTP-сервисов"
//
//@skip-check doc-comment-export-function-return-section
Функция ВерсияПодсистемы() Экспорт

	Возврат "1.0.1.1";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Порядок расчета хеш-суммы запроса зависит от особенностей прикладной задачи.
// Следует адаптировать состав компонент хеша в зависимости от задачи.
//
Функция ПолучитьХешСуммуЗапроса(Запрос, ДанныеЗапроса)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Запрос.ОтносительныйURL);
	
	Для каждого Параметр Из Запрос.ПараметрыЗапроса Цикл
		ХешированиеДанных.Добавить(Параметр.Ключ);
		ХешированиеДанных.Добавить(Параметр.Значение);
	КонецЦикла;
	
	ХешированиеДанных.Добавить(ДанныеЗапроса);
	
	Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	Возврат Результат;
	
КонецФункции

// Записывает ответ сервера в журнал входящих запросов для уже зарегистрированного запроса.
//
// Параметры:
//  Контекст - Структура - Параметры обрабатываемого запроса.
//  Ответ	 - HTTPОтвет - Ответ сервера на входящий запрос.
//
Процедура ЗаписатьОтветВЖурналВходящихHTTPЗапросов(Контекст, Ответ)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.кв_ЖурналВходящихHTTPЗапросов.ЗафиксироватьОтвет(Контекст, Ответ);
		
		РегистрыСведений.кв_ЖурналКонфликтовHTTPЗапросов.ЗафиксироватьРазблокировку(Контекст);
		
		ЗафиксироватьТранзакцию();
		
	Исключение 
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(Контекст.ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает признак использования регламентных заданий.
// 
// Возвращаемое значение:
//   - Булево - признак использования регламентных заданий.
//
Функция ИспользуютсяРегламентныеЗадания()
	
    Возврат Константы.кв_ИспользоватьРегламентныеЗадания.Получить();
	
КонецФункции

Функция ОписаниеРезультатаОбработкиЗапроса()
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Результат.Вставить("КодСостояния", ЗапросУспешноВыполнен());
	Результат.Вставить("ПричинаОшибки", "");
	Результат.Вставить("ПараметрыОтвета");
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовленОтветНаПредыдущийЗапрос(Контекст)
	
	ПараметрыОтвета = кв_ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст.Результат, "ПараметрыОтвета");
	
	Возврат ЗначениеЗаполнено(ПараметрыОтвета) 
		И ПараметрыОтвета.Свойство("Operation");
	
КонецФункции

Процедура ПроверитьГотовностьОтветаНаЗапрос(Контекст)
	
	ПодготовленОтветНаПредыдущийЗапрос = ПодготовленОтветНаПредыдущийЗапрос(Контекст);
	
	Если Контекст.Результат.Отказ Или ПодготовленОтветНаПредыдущийЗапрос Тогда
		Контекст.ГотовОтветНаЗапрос = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку параметров запроса.
//  Заполняются значения параметров. Проверяются обязательные параметры.
//
// Параметры:
//  Контекст	 - Структура - Контекст запроса.
//  Результат	 - Структура - Результат обработки запроса.
//
Процедура ПроверитьВозможностьИсполненияЗапроса(Контекст, ПараметрыМетода)
	
	ПроверитьДоступностьСервиса(Контекст);
	
	ПроверитьЗаполнениеОбязательныхПараметров(Контекст, ПараметрыМетода);
	
	ПроверитьИдемпотентностьЗапроса(Контекст);
	
	ПроверитьГотовностьОтветаНаЗапрос(Контекст);
	
КонецПроцедуры

Функция КонструкторКонтекстаЗапроса(Запрос, ОбеспечениеИдемпотентности, КонтрольКонфликтовЗапросов)
	
	ВремяНачалаОбработкиЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДатаЗапроса                 = ТекущаяДатаСеанса();
	ИдентификаторЗапроса        = Строка(Новый УникальныйИдентификатор());
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСервиса = ПолучитьИмяСервиса(Запрос.БазовыйURL);
	НастройкиСервиса = Справочники.кв_Сервисы.НастройкиСервиса(ИмяСервиса);
	
	Метод = МетодHTTPЗапроса(Запрос.HTTPМетод);
	ПараметрыШаблонаИзURL = ПараметрыШаблонаИзURL(Запрос);
	
	ТипКонтентаЗапроса = ТипКонтентаЗапроса(Запрос.Заголовки);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Идентификатор",         ИдентификаторЗапроса);
	Контекст.Вставить("ДатаЗапроса",           ДатаЗапроса);
	Контекст.Вставить("ВремяНачала",           ВремяНачалаОбработкиЗапроса);
	
	Контекст.Вставить("БазовыйURL",            Запрос.БазовыйURL);
	Контекст.Вставить("Метод",                 Метод);
	Контекст.Вставить("ОтносительныйURL",      Запрос.ОтносительныйURL);
	Контекст.Вставить("ПараметрыЗапросаИзURL", Запрос.ПараметрыЗапроса);
	Контекст.Вставить("ПараметрыШаблонаURL",   ПараметрыШаблонаИзURL);
	Контекст.Вставить("Заголовки",             Запрос.Заголовки);
	Контекст.Вставить("ТипКонтентаЗапроса",    ТипКонтентаЗапроса);
	
	Контекст.Вставить("Сервис",                НастройкиСервиса.Сервис);
	Контекст.Вставить("НастройкиСервиса",      НастройкиСервиса);
	Контекст.Вставить("ИмяСобытия",            НастройкиСервиса.ИмяСобытия);
	
	КлючИдемпотентности = кв_ОбщегоНазначенияКлиентСервер.СвойствоСоответствия(Запрос.Заголовки, "Idempotency-Key", "");
	Контекст.Вставить("КлючИдемпотентности", КлючИдемпотентности);
	
	ПроверитьИдемпотентностьЗапроса = НастройкиСервиса.ОбеспечениеИдемпотентности И ОбеспечениеИдемпотентности;
	Контекст.Вставить("ПроверитьИдемпотентностьЗапроса", ПроверитьИдемпотентностьЗапроса);
	
	ПроверитьКонфликтыЗапроса = НастройкиСервиса.КонтрольКонфликтовЗапросов И КонтрольКонфликтовЗапросов;
	Контекст.Вставить("ПроверитьКонфликтыЗапроса", ПроверитьКонфликтыЗапроса);
	
	ДанныеЗапроса = Запрос.ПолучитьТелоКакДвоичныеДанные();
	Контекст.Вставить("ДанныеЗапроса", ДанныеЗапроса);
	
	РазмерЗапроса = ДанныеЗапроса.Размер();
	Контекст.Вставить("РазмерЗапроса", РазмерЗапроса);
	
	ХешЗапроса = ПолучитьХешСуммуЗапроса(Запрос, ДанныеЗапроса);
	Контекст.Вставить("ХешЗапроса", ХешЗапроса);
	
	Если НастройкиСервиса.РегистрироватьТелоЗапроса Тогда
		ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		Контекст.Вставить("ТелоЗапроса", ТелоЗапроса);
	Иначе
		Контекст.Вставить("ТелоЗапроса", "");
	КонецЕсли;
	
	Результат = ОписаниеРезультатаОбработкиЗапроса();
	Контекст.Вставить("Результат", Результат);
	Контекст.Вставить("ГотовОтветНаЗапрос", Ложь);
	
	Возврат Контекст;
	
КонецФункции

Процедура ДобавитьПараметрыЗапросаВКонтекст(Контекст, Запрос, ПараметрыМетода)
	
	Контекст.Вставить("ПараметрыЗапроса", Новый Соответствие(Запрос.ПараметрыЗапроса));
	
	кв_ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Контекст.ПараметрыЗапроса, Контекст.ПараметрыШаблонаURL);
	
	ДобавитьПараметрыТелаЗапросаВКонтекст(Контекст, ПараметрыМетода);
	
КонецПроцедуры

// Записывает в ошибку в журнал регистрации.
//
// Параметры:
//  Контекст - Структура - Контекст запроса.
//  Информация  - Строка - Произвольная строка комментария к событию.
//  Данные  - Произвольный - Данные, с которыми связано событие.
//
Процедура ЗафиксироватьОшибкуВЖурналРегистрации(Контекст, Причина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(Причина);
	
	Шаблон = "%1
		|URL: %2%3,
		|HTTP-метод: %4,
		|Заголовки: %5,
		|Тело запроса: %6";
	
	ЗаголовкиСтрокой = ЗаголовкиСтрокой(Контекст.Заголовки);
	
	МаксимумКомментария = 2000;
	МаксимумТелаЗапроса = Контекст.НастройкиСервиса.МаксимальнаяДлинаТелаЗапроса;
	
	ТелоЗапроса = ?(МаксимумТелаЗапроса > 0, Лев(Контекст.ТелоЗапроса, МаксимумТелаЗапроса), Контекст.ТелоЗапроса);
	
	Комментарий = СтрШаблон(Шаблон, ТекстОшибки, Контекст.БазовыйURL, Контекст.ОтносительныйURL, Контекст.Метод,
		ЗаголовкиСтрокой, ТелоЗапроса);
	
	ЗаписьЖурналаРегистрации(Контекст.ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
		Лев(Комментарий, МаксимумКомментария));
	
КонецПроцедуры

Процедура ПроверитьДоступностьСервиса(Контекст)
	
	Если Контекст.НастройкиСервиса.Используется Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон("Service '%1' unavailable", Контекст.НастройкиСервиса.Наименование);
	ДобавитьОписаниеОшибки(Контекст, 503, , ТекстОшибки);
	
КонецПроцедуры

Функция НезаполненныеПараметрыЗапроса(Контекст, ПараметрыМетода)
	
	ПараметрыЗапроса = Контекст.ПараметрыЗапроса;
	
	Ошибки = Новый Массив;  
	РазделительВложенныхПараметров = ".";
	
	Для каждого Параметр Из ПараметрыМетода Цикл
		
		Если Параметр.Значение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Параметр.Ключ;
		
		ЭтоВложенныйПараметр = СтрНайти(ИмяПараметра, РазделительВложенныхПараметров) > 0;
		
		Если Не ЭтоВложенныйПараметр И ПараметрыЗапроса[ИмяПараметра] = Неопределено Тогда
			
			Ошибки.Добавить(ИмяПараметра);
			
		Иначе
			
			Если ЭтоВложенныйПараметр Тогда
				ЗначениеПараметра = кв_ОбщегоНазначенияКлиентСервер.СвойствоСоответствияРекурсивно(ПараметрыЗапроса, ИмяПараметра);
			Иначе
				ЗначениеПараметра = ПараметрыЗапроса[ИмяПараметра];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Ошибки.Добавить(ИмяПараметра); 
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Процедура ПроверитьЗаполнениеОбязательныхПараметров(Контекст, ПараметрыМетода)
	
	Если Контекст.Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = НезаполненныеПараметрыЗапроса(Контекст, ПараметрыМетода);
	
	Если НЕ ЗначениеЗаполнено(СписокОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиСтрокой = СтрСоединить(СписокОшибок, ", ");
	Шаблон = "Required parameters are not filled in: %1.";
	ТекстОшибки = СтрШаблон(Шаблон, ОшибкиСтрокой);
	
	ДобавитьОписаниеОшибки(Контекст, 400, , ТекстОшибки);
	
КонецПроцедуры

Функция СпецификацияИдемпотентности()
	
	АдресСпецификации = "https://www.ietf.org/archive/id/draft-ietf-httpapi-idempotency-key-header-01.html";
	
	Возврат АдресСпецификации;		
	
КонецФункции

Процедура ПроверитьЗаполнениеКлючаИдемпотентности(Контекст)
	
	Если Контекст.Результат.Отказ 
		Или ЗначениеЗаполнено(Контекст.КлючИдемпотентности) Тогда
		Возврат;
	КонецЕсли;
	
	ПодробноеОписаниеШаблон = "The request to the resource '%1' must contain the 'Idempotency-Key' header field";
	ТекстОшибки = СтрШаблон(ПодробноеОписаниеШаблон, Контекст.ОтносительныйURL);
	Ссылка = СпецификацияИдемпотентности();
	
	ДобавитьОписаниеОшибки(Контекст, 400, , ТекстОшибки, Ссылка);
	
КонецПроцедуры 

Функция ТекстЗапросаПроверкаВыполненияЗапроса()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса КАК ДатаЗапроса,
	|	кв_ЖурналВходящихHTTPЗапросов.Ответ КАК Ответ,
	|	кв_ЖурналВходящихHTTPЗапросов.КодСостояния КАК КодСостояния,
	|	кв_ЖурналВходящихHTTPЗапросов.ХешЗапроса КАК ХешЗапроса
	|ПОМЕСТИТЬ ВтУспешныеЗапросы
	|ИЗ
	|	РегистрСведений.кв_ЖурналВходящихHTTPЗапросов КАК кв_ЖурналВходящихHTTPЗапросов
	|ГДЕ
	|	кв_ЖурналВходящихHTTPЗапросов.Сервис = &Сервис
	|	И кв_ЖурналВходящихHTTPЗапросов.Идентификатор <> &Идентификатор
	|	И кв_ЖурналВходящихHTTPЗапросов.КлючИдемпотентности = &КлючИдемпотентности
	|	И кв_ЖурналВходящихHTTPЗапросов.КодСостояния МЕЖДУ 200 И 299
	|	И кв_ЖурналВходящихHTTPЗапросов.ВремяНачала < &ВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса КАК ДатаЗапроса,
	|	кв_ЖурналВходящихHTTPЗапросов.Ответ КАК Ответ,
	|	кв_ЖурналВходящихHTTPЗапросов.КодСостояния КАК КодСостояния,
	|	кв_ЖурналВходящихHTTPЗапросов.ХешЗапроса КАК ХешЗапроса
	|ПОМЕСТИТЬ ВтЗапросыБезСтатуса
	|ИЗ
	|	РегистрСведений.кв_ЖурналВходящихHTTPЗапросов КАК кв_ЖурналВходящихHTTPЗапросов
	|ГДЕ
	|	кв_ЖурналВходящихHTTPЗапросов.Сервис = &Сервис
	|	И кв_ЖурналВходящихHTTPЗапросов.Идентификатор <> &Идентификатор
	|	И кв_ЖурналВходящихHTTPЗапросов.КлючИдемпотентности = &КлючИдемпотентности
	|	И кв_ЖурналВходящихHTTPЗапросов.КодСостояния = 0
	|	И (ВЫРАЗИТЬ(кв_ЖурналВходящихHTTPЗапросов.Ответ КАК СТРОКА(1))) = """"
	|	И кв_ЖурналВходящихHTTPЗапросов.ВремяНачала < &ВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтУспешныеЗапросы.ДатаЗапроса) КАК ДатаЗапроса
	|ПОМЕСТИТЬ ВтДатаУспешногоЗапроса
	|ИЗ
	|	ВтУспешныеЗапросы КАК ВтУспешныеЗапросы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтЗапросыБезСтатуса.ДатаЗапроса) КАК ДатаЗапроса
	|ПОМЕСТИТЬ ВтДатаЗапросаБезСтатуса
	|ИЗ
	|	ВтЗапросыБезСтатуса КАК ВтЗапросыБезСтатуса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтУспешныеЗапросы.ДатаЗапроса КАК ДатаЗапроса,
	|	ВтУспешныеЗапросы.Ответ КАК Ответ,
	|	ВтУспешныеЗапросы.КодСостояния КАК КодСостояния,
	|	ВтУспешныеЗапросы.ХешЗапроса КАК ХешЗапроса,
	|	0 КАК Приоритет
	|ИЗ
	|	ВтУспешныеЗапросы КАК ВтУспешныеЗапросы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДатаУспешногоЗапроса КАК ВтДатаУспешногоЗапроса
	|		ПО ВтУспешныеЗапросы.ДатаЗапроса = ВтДатаУспешногоЗапроса.ДатаЗапроса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтЗапросыБезСтатуса.ДатаЗапроса,
	|	ВтЗапросыБезСтатуса.Ответ,
	|	ВтЗапросыБезСтатуса.КодСостояния,
	|	ВтЗапросыБезСтатуса.ХешЗапроса,
	|	1
	|ИЗ
	|	ВтЗапросыБезСтатуса КАК ВтЗапросыБезСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДатаЗапросаБезСтатуса КАК ВтДатаЗапросаБезСтатуса
	|		ПО ВтЗапросыБезСтатуса.ДатаЗапроса = ВтДатаЗапросаБезСтатуса.ДатаЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПроверитьЗафиксироватьКонфликтЗапросов(Выборка, Контекст)
	
	Если НЕ Контекст.ПроверитьКонфликтыЗапроса Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоКодУспешногоВыполнения(Выборка.КодСостояния) И ЗначениеЗаполнено(Выборка.Ответ) Тогда
		Возврат;
	КонецЕсли;
	
	ПодробностиШаблон = "The previous request with the Idempotency-key %1 is still being processed";
	ТекстОшибки = СтрШаблон(ПодробностиШаблон, Контекст.КлючИдемпотентности);
	Ссылка = СпецификацияИдемпотентности();
	
	ДобавитьОписаниеОшибки(Контекст, 409, , ТекстОшибки, Ссылка);
	
	РегистрыСведений.кв_ЖурналКонфликтовHTTPЗапросов.ЗафиксироватьКонфликт(Контекст);
	
КонецПроцедуры

Процедура ОтветитьНеобрабатываемаяСущность(Контекст)
	
	ПодробностиШаблон = "The hash of the repeated request and the Idempotency-key %1 do not match the primary request";
	ТекстОшибки = СтрШаблон(ПодробностиШаблон, Контекст.КлючИдемпотентности);
	Ссылка = СпецификацияИдемпотентности();
	
	ДобавитьОписаниеОшибки(Контекст, 422, , ТекстОшибки, Ссылка);
	
КонецПроцедуры

// Проверяет, была ли выполнена операция по заголовку "Idempotency-key" и хешу тела запроса.
//  Реализация по спецификации "The Idempotency-Key HTTP Header Field"
//  https://www.ietf.org/archive/id/draft-ietf-httpapi-idempotency-key-header-01.html
//
// Параметры:
//  Контекст - Структура - Контекст запроса.
//
Процедура ПроверитьИдемпотентностьЗапроса(Контекст)
	
	Если Контекст.Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Контекст.ПроверитьИдемпотентностьЗапроса Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеКлючаИдемпотентности(Контекст);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Контекст.Сервис);
	Запрос.УстановитьПараметр("Идентификатор", Контекст.Идентификатор);
	Запрос.УстановитьПараметр("КлючИдемпотентности", Контекст.КлючИдемпотентности);
	Запрос.УстановитьПараметр("ВремяНачала", Контекст.ВремяНачала);
	
	Запрос.Текст = ТекстЗапросаПроверкаВыполненияЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ХешНовогоЗапроса = Контекст.ХешЗапроса;
		ХешТелаЗавершенногоЗапроса = Выборка.ХешЗапроса;
		
		Если ХешНовогоЗапроса = ХешТелаЗавершенногоЗапроса Тогда
			
			ПроверитьЗафиксироватьКонфликтЗапросов(Выборка, Контекст);
			
			ВернутьКэшОтветаОбработанногоЗапроса(Выборка, Контекст); 
			
		Иначе
			
			ОтветитьНеобрабатываемаяСущность(Контекст);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТелоОтвета(Данные = Неопределено, ПреобразоватьДанные = Истина)
	
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ПреобразоватьДанные Тогда
		
		СимволыОтступа = "    ";
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Windows, СимволыОтступа);
		
		Ответ = кв_ОбщегоНазначения.ЗначениеВСтрокуJSON(Данные, ПараметрыЗаписи);
		
	Иначе
		
		Ответ = Данные;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает ответ HTTP-сервиса, с параметрами в формате JSON в теле ответа.
//
// Параметры:
//  Контекст			 - Структура - Контекст запроса.
//  Результат			 - Структура - Результат обработки запроса.
//  ПреобразоватьДанные	 - Булево	 - Требуется преобразование данных для передачи.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Содержит ответ, формируемый HTTP-сервисом.
//
Функция СформироватьОтвет(Контекст, ПреобразоватьДанные) 
	
	Результат = Контекст.Результат;
	ПараметрыОтвета = Результат.ПараметрыОтвета;
	
	УспешноеВыполнениеЗапроса = ЭтоКодУспешногоВыполнения(Результат.КодСостояния);

	ContentType = "Content-Type";
	ContentLanguage = "Content-Language"; 
	
	Ответ = Новый HTTPСервисОтвет(Результат.КодСостояния);
	
	Попытка
		
		ТелоОтвета = ПолучитьТелоОтвета(ПараметрыОтвета, ПреобразоватьДанные);
		
		Если УспешноеВыполнениеЗапроса Тогда
			
			Ответ.Заголовки.Вставить(ContentType, "application/json; charset=utf-8");
			
		Иначе
			
			Ответ.Заголовки.Вставить(ContentType, "application/problem+json; charset=utf-8"); 
			Ответ.Заголовки.Вставить(ContentLanguage, "en");
			Ответ.Причина = кв_ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтвета, "title", "");
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			Ответ.УстановитьТелоИзСтроки(ТелоОтвета);		
		КонецЕсли;
		
	Исключение
		
		Причина = ИнформацияОбОшибке();
		ЗафиксироватьОшибкуВЖурналРегистрации(Контекст, Причина);
		
		КодСостояния = 500;
		ПричинаОшибки = ПричинаОшибкиПоКоду(КодСостояния);
		
		Ответ = Новый HTTPСервисОтвет(КодСостояния, ПричинаОшибки);
		
	КонецПопытки;

	Возврат Ответ;
	
КонецФункции 

Функция ПолучитьИмяСервиса(БазовыйURL)
	
	ПозицияКрайнегоСлэша = СтрНайти(БазовыйURL, "/", НаправлениеПоиска.СКонца, , 1);
	ИмяСервиса = Сред(БазовыйURL, ПозицияКрайнегоСлэша + 1);
	
	Возврат ИмяСервиса;
	
КонецФункции

Процедура ЗаписатьПараметрыВходящегоЗапросаВЖурнал(Контекст)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.кв_ЖурналВходящихHTTPЗапросов.ЗафиксироватьПараметрыЗапроса(Контекст);
	
КонецПроцедуры

Процедура ВернутьКэшОтветаОбработанногоЗапроса(Выборка, Контекст)
	
	Если Контекст.Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОтвета = Новый Структура;
	
	ПозицияНачалоТелоОтвета = СтрНайти(Выборка.Ответ, "{", , , 1); 
	ПозицияКонецТелоОтвета = СтрНайти(Выборка.Ответ, "}", НаправлениеПоиска.СКонца, , 1); 
	
	ТелоОтветаJSON = Сред(Выборка.Ответ, ПозицияНачалоТелоОтвета, ПозицияКонецТелоОтвета);
	ПараметрыОтветаВыполненногоЗапроса = кв_ОбщегоНазначения.ПрочитатьJSONСтроку(ТелоОтветаJSON, Ложь);
	
	кв_ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтвета, ПараметрыОтветаВыполненногоЗапроса);
	
	ДатаРегистрацииОперации = кв_ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Выборка.ДатаЗапроса);
	
	ЗавершеннаяОперация = Новый Структура;
	ЗавершеннаяОперация.Вставить("idempotency_key", Контекст.КлючИдемпотентности);
	ЗавершеннаяОперация.Вставить("period", ДатаРегистрацииОперации);
	
	ПараметрыОтвета.Вставить("Operation", ЗавершеннаяОперация);
	
	Контекст.Результат.Вставить("ПараметрыОтвета", ПараметрыОтвета);
	
КонецПроцедуры

// Выполняет удаление устаревших записей регистров журналов
//
// Параметры:
//  ИмяРегистра		 - Строка	 - Имя регистра, в котором выполняется удаление записей.
//  ИмяПоляПериод	 - Строка	 - Имя измерения регистра, по которому производится отбор по периоду.
//
Процедура УдалитьУстаревшиеЗаписиЖурнала(ИмяРегистра, ИмяПоляПериод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонецТекущегоДня = КонецДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецТекущегоДня", КонецТекущегоДня);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	кв_Сервисы.Ссылка КАК Сервис,
	|	кв_Сервисы.ДнейХраненияЗаписейЖурналов КАК ДнейХраненияЗаписейЖурналов,
	|	ДОБАВИТЬКДАТЕ(&КонецТекущегоДня, ДЕНЬ, -кв_Сервисы.ДнейХраненияЗаписейЖурналов) КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТ_НастройкиСервисов
	|ИЗ
	|	Справочник.кв_Сервисы КАК кв_Сервисы
	|ГДЕ
	|	кв_Сервисы.Используется
	|	И кв_Сервисы.Журналирование
	|	И кв_Сервисы.ДнейХраненияЗаписейЖурналов > 0
	|	И НЕ кв_Сервисы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	кв_ЖурналВходящихHTTPЗапросов.Сервис КАК Сервис,
	|	кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса КАК ДатаЗапроса
	|ИЗ
	|	ВТ_НастройкиСервисов КАК ВТ_НастройкиСервисов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.кв_ЖурналВходящихHTTPЗапросов КАК кв_ЖурналВходящихHTTPЗапросов
	|		ПО ВТ_НастройкиСервисов.Сервис = кв_ЖурналВходящихHTTPЗапросов.Сервис
	|			И ВТ_НастройкиСервисов.ДатаАктуальности >= кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	кв_ЖурналВходящихHTTPЗапросов.Сервис,
	|	кв_ЖурналВходящихHTTPЗапросов.ДатаЗапроса";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "кв_ЖурналВходящихHTTPЗапросов", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаЗапроса", ИмяПоляПериод);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сервис.Установить(Выборка.Сервис);
		
		ЭлементОтбора = НаборЗаписей.Отбор.Найти(ИмяПоляПериод);
		Если ЭлементОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементОтбора.Установить(Выборка[ИмяПоляПериод]);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст причины ошибки по коду состояния.
//
// Параметры:
//  КодСостояния - Число - код ошибки при обработке запроса.
// 
// Возвращаемое значение:
//   - Строка - унифицированный текст ошибки.
//
Функция ПричинаОшибкиПоКоду(КодСостояния)
	
	ПричиныОшибок = Новый Соответствие;
	ПричиныОшибок.Вставить(400, "Bad Request");
	ПричиныОшибок.Вставить(409, "Conflict");
	ПричиныОшибок.Вставить(415, "Unsupported Media Type");
	ПричиныОшибок.Вставить(422, "Unprocessable Entity");
	ПричиныОшибок.Вставить(500, "Internal Server Error");
	ПричиныОшибок.Вставить(503, "Service Unavailable");
	
	ПричинаОшибки = ПричиныОшибок[КодСостояния];
	
	Возврат ПричинаОшибки;
	
КонецФункции

Функция ЗапросУспешноВыполнен()
	
	Возврат 200;
	
КонецФункции

Функция ЭтоКодУспешногоВыполнения(КодСостояния)
	
	ЗапросУспешноВыполнен = ЗапросУспешноВыполнен();
	РазноеПостоянноеПредупреждение = 299;
	
	Возврат КодСостояния >= ЗапросУспешноВыполнен И КодСостояния <= РазноеПостоянноеПредупреждение; 	
	
КонецФункции

Функция МетодHTTPЗапроса(HTTPМетод)
	
	Если Не Метаданные.Перечисления.кв_HTTPМетоды.ЗначенияПеречисления.Найти(HTTPМетод) = Неопределено Тогда
		Метод = Перечисления.кв_HTTPМетоды[HTTPМетод];
	Иначе
		Метод = Перечисления.кв_HTTPМетоды.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Метод;
	
КонецФункции

Процедура ОбрабатываемыеПараметрыЗапроса(Контекст, ПараметрыМетода)
	
	Контекст.Вставить("ИзвлекаемыеПараметры",  Новый Массив);
	Контекст.Вставить("ОбязательныеПараметры", Новый Массив);
	
	Если ПараметрыМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из ПараметрыМетода Цикл
		Контекст.ИзвлекаемыеПараметры.Добавить(Параметр.Ключ);
		Если Параметр.Значение = Истина Тогда
			Контекст.ОбязательныеПараметры.Добавить(Параметр.Ключ);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыТелаЗапросаВКонтекст(Контекст, ПараметрыМетода)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Контекст.ТелоЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПараметрыТелаЗапросаJSONВКонтекст(Контекст, ПараметрыМетода);
	
КонецПроцедуры

Функция ИзвлечьПараметрыТелаЗапроса(ИзвлекаемыеПараметры, РезультатЧтения)
	
	ПараметрыТелаЗапроса = Новый Соответствие;
	
	Для каждого Параметр Из ИзвлекаемыеПараметры Цикл
		
		ИмяПараметра      = Параметр.Ключ;
		ЗначениеПараметра = РезультатЧтения[ИмяПараметра];
		
		Если Не ЗначениеПараметра = Неопределено Тогда
			ПараметрыТелаЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыТелаЗапроса;
	
КонецФункции

Функция ПараметрыШаблонаИзURL(Запрос)
	
	ПараметрыШаблонаИзURL = Новый Соответствие;
	Шаблон = "url_%1";
	
	Для каждого ПараметрURL Из Запрос.ПараметрыURL Цикл
		
		Если ПараметрURL.Ключ = "*" Тогда
			
			ЗначенияПараметров = СтрРазделить(ПараметрURL.Значение, "/", Ложь);
			
			Для Счетчик = 0 По ЗначенияПараметров.ВГраница() Цикл
				Ключ = СтрШаблон(Шаблон, Формат(Счетчик, "ЧН=0; ЧГ=0"));
				ПараметрыШаблонаИзURL.Вставить(Ключ, ЗначенияПараметров[Счетчик]);
			КонецЦикла;
			
		Иначе
			
			ПараметрыШаблонаИзURL.Вставить(ПараметрURL.Ключ, ПараметрURL.Значение);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ПараметрыШаблонаИзURL);
	
КонецФункции

Функция ТипКонтентаЗапроса(Заголовки)
	
	Возврат Заголовки.Получить("Content-Type");
	
КонецФункции

Процедура ДобавитьПараметрыТелаЗапросаJSONВКонтекст(Контекст, ПараметрыМетода)
	
	Если НЕ НРег(Контекст.ТипКонтентаЗапроса) = "application/json" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЧтения = кв_ОбщегоНазначения.ПрочитатьJSONСтроку(Контекст.ТелоЗапроса, Истина);
	
	ПараметрыТелаЗапроса = ИзвлечьПараметрыТелаЗапроса(ПараметрыМетода, РезультатЧтения);
	
	кв_ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Контекст.ПараметрыЗапроса, ПараметрыТелаЗапроса);
	
КонецПроцедуры

#КонецОбласти